diff --git a/solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest.java b/solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest.java
new file mode 100644
index 0000000000..5cdecbc505
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest.java
@@ -0,0 +1,291 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.cloud.cdcr;
+
+import java.lang.invoke.MethodHandles;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.client.solrj.SolrQuery;
+import org.apache.solr.client.solrj.impl.CloudSolrClient;
+import org.apache.solr.client.solrj.request.CollectionAdminRequest;
+import org.apache.solr.client.solrj.response.QueryResponse;
+import org.apache.solr.cloud.MiniSolrCloudCluster;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.handler.CdcrParams;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class CdcrOpsAndBoundariesTest extends SolrTestCaseJ4 {
+
+  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
+
+  MiniSolrCloudCluster target, source;
+  CloudSolrClient sourceSolrClient, targetSolrClient;
+
+  @Before
+  public void before() throws Exception {
+    target = new MiniSolrCloudCluster(1, createTempDir("cdcr-target"), buildJettyConfig("/solr"));
+    target.waitForAllNodes(30);
+    System.setProperty("cdcr.target.zkHost", target.getZkServer().getZkAddress());
+    source = new MiniSolrCloudCluster(1, createTempDir("cdcr-cluster"), buildJettyConfig("/solr"));
+    source.waitForAllNodes(30);
+  }
+
+  @After
+  public void after() throws Exception {
+    target.shutdown();
+    source.shutdown();
+  }
+
+  /**
+   * Check the ops statistics.
+   */
+  @Test
+  public void testOps() throws Exception {
+    createCollections();
+
+    // Start CDCR
+    CdcrTestsUtil.cdcrRestart(sourceSolrClient);
+
+    // Index documents
+    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);
+
+    NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();
+    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);
+    System.out.println("collections: " + collections);
+    NamedList ops = (NamedList) collections.get("cdcr-target");
+    System.out.println("ops: " + ops);
+    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);
+    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);
+    assertTrue(opsAll > 0);
+    assertEquals(opsAll, opsAdds, 0);
+
+    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);
+    assertEquals(0, opsDeletes, 0);
+
+    deleteCollections();
+  }
+
+  @Test
+  public void testTargetCollectionNotAvailable() throws Exception {
+    createCollections();
+
+    // send start action to first shard
+    CdcrTestsUtil.cdcrStart(sourceSolrClient);
+
+    assertNotSame(null, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    // sleep for a bit to ensure that replicator threads are started
+    Thread.sleep(3000);
+
+    target.deleteAllCollections();
+
+    CdcrTestsUtil.indexRandomDocs(6, sourceSolrClient);
+    assertEquals(6L, sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound());
+
+    // we need to wait until the replicator thread is triggered
+    int cnt = 15; // timeout after 15 seconds
+    AssertionError lastAssertionError = null;
+    while (cnt > 0) {
+      try {
+        QueryResponse rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.ERRORS);
+        NamedList collections = (NamedList) ((NamedList) rsp.getResponse().get(CdcrParams.ERRORS)).getVal(0);
+        NamedList errors = (NamedList) collections.get("cdcr-target");
+        assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));
+        NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);
+        assertNotNull(lastErrors);
+        assertTrue(0 < lastErrors.size());
+        deleteCollections();
+        return;
+      } catch (AssertionError e) {
+        lastAssertionError = e;
+        cnt--;
+        Thread.sleep(1000);
+      }
+    }
+
+    deleteCollections();
+    throw new AssertionError("Timeout while trying to assert replication errors", lastAssertionError);
+  }
+
+  @Test
+  public void testReplicationStartStop() throws Exception {
+    createCollections();
+
+    CdcrTestsUtil.indexRandomDocs(10, sourceSolrClient);
+    CdcrTestsUtil.cdcrStart(sourceSolrClient);
+
+    assertEquals(10, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    CdcrTestsUtil.cdcrStop(sourceSolrClient);
+
+    CdcrTestsUtil.indexRandomDocs(110, sourceSolrClient);
+
+    // Start again CDCR, the source cluster should reinitialise its log readers
+    // with the latest checkpoints
+
+    CdcrTestsUtil.cdcrRestart(sourceSolrClient);
+
+    assertEquals(110, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    deleteCollections();
+  }
+
+  /**
+   * Check that batch updates with deletes
+   */
+  @Test
+  public void testBatchAddsWithDelete() throws Exception {
+    createCollections();
+
+    // Start CDCR
+    CdcrTestsUtil.cdcrRestart(sourceSolrClient);
+    // Index 50 documents
+    CdcrTestsUtil.indexRandomDocs(50, sourceSolrClient);
+
+    // Delete 10 documents: 10-19
+    List<String> ids = new ArrayList<>();
+    for (int id = 10; id < 20; id++) {
+      ids.add(Integer.toString(id));
+    }
+    sourceSolrClient.deleteById(ids, 10);
+
+    CdcrTestsUtil.indexRandomDocs(50, 60, sourceSolrClient);
+
+    // Delete 1 document: 50
+    ids = new ArrayList<>();
+    ids.add(Integer.toString(50));
+    sourceSolrClient.deleteById(ids, 10);
+
+    CdcrTestsUtil.indexRandomDocs(60, 70, sourceSolrClient);
+
+    assertEquals(59, CdcrTestsUtil.waitForClusterToSync(59, sourceSolrClient));
+    assertEquals(59, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    deleteCollections();
+  }
+
+  /**
+   * Checks that batches are correctly constructed when batch boundaries are reached.
+   */
+  @Test
+  public void testBatchBoundaries() throws Exception {
+    createCollections();
+
+    // Start CDCR
+    CdcrTestsUtil.cdcrRestart(sourceSolrClient);
+
+    log.info("Indexing documents");
+
+    CdcrTestsUtil.indexRandomDocs(1000, sourceSolrClient);
+
+    assertEquals(1000, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    deleteCollections();
+  }
+
+  /**
+   * Check resilience of replication with delete by query executed on targets
+   */
+  @Test
+  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {
+    createCollections();
+
+    // Start CDCR
+    CdcrTestsUtil.cdcrRestart(sourceSolrClient);
+
+    CdcrTestsUtil.indexRandomDocs(50, sourceSolrClient);
+
+    assertEquals(50, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    sourceSolrClient.deleteByQuery("*:*", 1);
+
+    assertEquals(0, CdcrTestsUtil.waitForClusterToSync(0, sourceSolrClient));
+    assertEquals(0, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    CdcrTestsUtil.indexRandomDocs(51, 101, sourceSolrClient);
+
+    assertEquals(50, CdcrTestsUtil.waitForClusterToSync
+        (sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound(), targetSolrClient));
+
+    targetSolrClient.deleteByQuery("*:*", 1);
+
+    assertEquals(50, sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound());
+    assertEquals(0, CdcrTestsUtil.waitForClusterToSync(0, targetSolrClient));
+    // Restart CDCR
+    CdcrTestsUtil.cdcrRestart(sourceSolrClient);
+
+    CdcrTestsUtil.indexRandomDocs(102, 152, sourceSolrClient);
+
+    assertEquals(100, sourceSolrClient.query(new SolrQuery("*:*")).getResults().getNumFound());
+    assertEquals(50, CdcrTestsUtil.waitForClusterToSync(50, targetSolrClient));
+
+    deleteCollections();
+  }
+
+  private void createSourceCollection() throws Exception {
+    source.uploadConfigSet(configset("cdcr-source"), "cdcr-source");
+    CollectionAdminRequest.createCollection("cdcr-source", "cdcr-source", 1, 1)
+        .withProperty("solr.directoryFactory", "solr.StandardDirectoryFactory")
+        .process(source.getSolrClient());
+    Thread.sleep(1000);
+    sourceSolrClient = source.getSolrClient();
+    sourceSolrClient.setDefaultCollection("cdcr-source");
+  }
+
+  private void createTargetCollection() throws Exception {
+    target.uploadConfigSet(configset("cdcr-target"), "cdcr-target");
+    CollectionAdminRequest.createCollection("cdcr-target", "cdcr-target", 1, 1)
+        .withProperty("solr.directoryFactory", "solr.StandardDirectoryFactory")
+        .process(target.getSolrClient());
+    Thread.sleep(1000);
+    targetSolrClient = target.getSolrClient();
+    targetSolrClient.setDefaultCollection("cdcr-target");
+  }
+
+  private void deleteSourceCollection() throws Exception {
+    source.deleteAllCollections();
+  }
+
+  private void deleteTargetcollection() throws Exception {
+    target.deleteAllCollections();
+  }
+
+  private void createCollections() throws Exception {
+    createTargetCollection();
+    createSourceCollection();
+  }
+
+  private void deleteCollections() throws Exception {
+    deleteSourceCollection();
+    deleteTargetcollection();
+  }
+
+}
+
diff --git a/solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil.java b/solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil.java
index 6a186fdb12..eda6f7c289 100644
--- a/solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil.java
+++ b/solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil.java
@@ -27,7 +27,10 @@ import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.impl.CloudSolrClient;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
+import org.apache.solr.client.solrj.request.AbstractUpdateRequest;
+import org.apache.solr.client.solrj.request.UpdateRequest;
 import org.apache.solr.client.solrj.response.QueryResponse;
+import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.cloud.DocCollection;
 import org.apache.solr.common.cloud.Replica;
 import org.apache.solr.common.cloud.Slice;
@@ -40,9 +43,14 @@ import org.apache.solr.util.TimeOut;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class CdcrTestsUtil extends SolrTestCaseJ4{
+public class CdcrTestsUtil extends SolrTestCaseJ4 {
   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
 
+  protected static void cdcrRestart(CloudSolrClient client) throws SolrServerException, IOException {
+    cdcrStop(client);
+    cdcrStart(client);
+  }
+
   protected static void cdcrStart(CloudSolrClient client) throws SolrServerException, IOException {
     QueryResponse response = invokeCdcrAction(client, CdcrParams.CdcrAction.START);
     assertEquals("started", ((NamedList) response.getResponse().get("status")).get("process"));
@@ -89,7 +97,7 @@ public class CdcrTestsUtil extends SolrTestCaseJ4{
     while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {
       response = client.query(params);
       if (response.getResponse() != null && response.getResponse().get("fingerprint") != null) {
-        return (long)((LinkedHashMap)response.getResponse().get("fingerprint")).get("maxVersionEncountered");
+        return (long) ((LinkedHashMap) response.getResponse().get("fingerprint")).get("maxVersionEncountered");
       }
       Thread.sleep(200);
     }
@@ -97,6 +105,10 @@ public class CdcrTestsUtil extends SolrTestCaseJ4{
     return null;
   }
 
+  protected static long waitForClusterToSync(long numDocs, CloudSolrClient clusterSolrClient) throws Exception {
+    return waitForClusterToSync((int) numDocs, clusterSolrClient, "*:*");
+  }
+
   protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient) throws Exception {
     return waitForClusterToSync(numDocs, clusterSolrClient, "*:*");
   }
@@ -112,7 +124,7 @@ public class CdcrTestsUtil extends SolrTestCaseJ4{
       }
       Thread.sleep(1000);
     }
-    return response != null ? response.getResults().getNumFound() : 0;
+    return response != null ? response.getResults().getNumFound() : null;
   }
 
   protected static boolean assertShardInSync(String collection, String shard, CloudSolrClient client) throws IOException, SolrServerException {
@@ -146,4 +158,28 @@ public class CdcrTestsUtil extends SolrTestCaseJ4{
     }
     return false;
   }
+
+  public static void indexRandomDocs(Integer start, Integer count, CloudSolrClient solrClient) throws Exception {
+    // ADD operation on cluster 1
+    int docs = 0;
+    if (count == 0) {
+      docs = (TEST_NIGHTLY ? 100 : 10);
+    } else {
+      docs = count;
+    }
+    for (int k = start; k < docs; k++) {
+      UpdateRequest req = new UpdateRequest();
+      SolrInputDocument doc = new SolrInputDocument();
+      doc.addField("id", k);
+      req.add(doc);
+
+      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);
+      req.process(solrClient);
+    }
+  }
+
+  public static void indexRandomDocs(Integer count, CloudSolrClient solrClient) throws Exception {
+    indexRandomDocs(0, count, solrClient);
+  }
+
 }
