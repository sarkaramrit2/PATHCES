diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter.java
index 0a21a62411..3ae83aa416 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter.java
@@ -32,9 +32,11 @@ import org.apache.lucene.util.mutable.MutableValueDouble;
 import org.apache.lucene.util.mutable.MutableValueFloat;
 import org.apache.lucene.util.mutable.MutableValueInt;
 import org.apache.lucene.util.mutable.MutableValueLong;
+import org.apache.lucene.util.mutable.MutableValueStr;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.NumberType;
 import org.apache.solr.schema.SchemaField;
+import org.apache.solr.schema.TextField;
 
 /** 
  * this is a transition class: for numeric types we use function-based distributed grouping,
@@ -72,60 +74,71 @@ class GroupConverter {
       converted.sortValues = original.sortValues; // ?
       NumberType type = fieldType.getNumberType();
       final MutableValue v;
-      switch (type) {
-        case INTEGER:
-          MutableValueInt mutableInt = new MutableValueInt();
-          if (original.groupValue == null) {
-            mutableInt.value = 0;
-            mutableInt.exists = false;
-          } else {
-            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);
-          }
-          v = mutableInt;
-          break;
-        case FLOAT:
-          MutableValueFloat mutableFloat = new MutableValueFloat();
-          if (original.groupValue == null) {
-            mutableFloat.value = 0;
-            mutableFloat.exists = false;
-          } else {
-            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);
-          }
-          v = mutableFloat;
-          break;
-        case DOUBLE:
-          MutableValueDouble mutableDouble = new MutableValueDouble();
-          if (original.groupValue == null) {
-            mutableDouble.value = 0;
-            mutableDouble.exists = false;
-          } else {
-            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);
-          }
-          v = mutableDouble;
-          break;
-        case LONG:
-          MutableValueLong mutableLong = new MutableValueLong();
-          if (original.groupValue == null) {
-            mutableLong.value = 0;
-            mutableLong.exists = false;
-          } else {
-            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);
-          }
-          v = mutableLong;
-          break;
-        case DATE:
-          MutableValueDate mutableDate = new MutableValueDate();
-          if (original.groupValue == null) {
-            mutableDate.value = 0;
-            mutableDate.exists = false;
-          } else {
-            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();
-          }
-          v = mutableDate;
-          break;
-        default:
-          throw new AssertionError();
+
+      if (type == null && (fieldType instanceof TextField)) {
+        MutableValueStr mutableValueStr = new MutableValueStr();
+        BytesRefBuilder bytesRefBuilder = new BytesRefBuilder();
+        bytesRefBuilder.copyBytes(original.groupValue);
+        mutableValueStr.value = bytesRefBuilder;
+        v = mutableValueStr;
+      }
+      else {
+        switch (type) {
+          case INTEGER:
+            MutableValueInt mutableInt = new MutableValueInt();
+            if (original.groupValue == null) {
+              mutableInt.value = 0;
+              mutableInt.exists = false;
+            } else {
+              mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);
+            }
+            v = mutableInt;
+            break;
+          case FLOAT:
+            MutableValueFloat mutableFloat = new MutableValueFloat();
+            if (original.groupValue == null) {
+              mutableFloat.value = 0;
+              mutableFloat.exists = false;
+            } else {
+              mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);
+            }
+            v = mutableFloat;
+            break;
+          case DOUBLE:
+            MutableValueDouble mutableDouble = new MutableValueDouble();
+            if (original.groupValue == null) {
+              mutableDouble.value = 0;
+              mutableDouble.exists = false;
+            } else {
+              mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);
+            }
+            v = mutableDouble;
+            break;
+          case LONG:
+            MutableValueLong mutableLong = new MutableValueLong();
+            if (original.groupValue == null) {
+              mutableLong.value = 0;
+              mutableLong.exists = false;
+            } else {
+              mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);
+            }
+            v = mutableLong;
+            break;
+          case DATE:
+            MutableValueDate mutableDate = new MutableValueDate();
+            if (original.groupValue == null) {
+              mutableDate.value = 0;
+              mutableDate.exists = false;
+            } else {
+              mutableDate.value = ((Date) fieldType.toObject(field, original.groupValue)).getTime();
+            }
+            v = mutableDate;
+            break;
+          default:
+            throw new AssertionError();
+        }
       }
+
       converted.groupValue = v;
       result.add(converted);
     }
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
index b81dda050a..2ac857979d 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
@@ -34,6 +34,7 @@ import org.apache.lucene.search.grouping.ValueSourceGroupSelector;
 import org.apache.lucene.util.BytesRef;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.SchemaField;
+import org.apache.solr.schema.TextField;
 import org.apache.solr.search.grouping.Command;
 
 /**
@@ -98,7 +99,7 @@ public class SearchGroupsFieldCommand implements Command<SearchGroupsFieldComman
     final List<Collector> collectors = new ArrayList<>(2);
     final FieldType fieldType = field.getType();
     if (topNGroups > 0) {
-      if (fieldType.getNumberType() != null) {
+      if (fieldType.getNumberType() != null || (fieldType instanceof TextField)) {
         ValueSource vs = fieldType.getValueSource(field, null);
         firstPassGroupingCollector
             = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
index a4962789a0..e5830de6f8 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
@@ -36,6 +36,7 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.SchemaField;
+import org.apache.solr.schema.TextField;
 import org.apache.solr.search.grouping.Command;
 
 /**
@@ -132,7 +133,7 @@ public class TopGroupsFieldCommand implements Command<TopGroups<BytesRef>> {
 
     final List<Collector> collectors = new ArrayList<>(1);
     final FieldType fieldType = field.getType();
-    if (fieldType.getNumberType() != null) {
+    if (fieldType.getNumberType() != null || (fieldType instanceof TextField)) {
       ValueSource vs = fieldType.getValueSource(field, null);
       Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);
       secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
index b424670f23..cb3cb618fc 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
@@ -110,7 +110,7 @@ public class SearchGroupsResultTransformer implements ShardResultTransformer<Lis
   private NamedList serializeSearchGroup(Collection<SearchGroup<BytesRef>> data, SearchGroupsFieldCommand command) {
     final NamedList<Object[]> result = new NamedList<>(data.size());
 
-    for (SearchGroup<BytesRef> searchGroup : data) {
+    for (SearchGroup searchGroup : data) {
       Object[] convertedSortValues = new Object[searchGroup.sortValues.length];
       for (int i = 0; i < searchGroup.sortValues.length; i++) {
         Object sortValue = searchGroup.sortValues[i];
@@ -119,7 +119,13 @@ public class SearchGroupsResultTransformer implements ShardResultTransformer<Lis
         convertedSortValues[i] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);
       }
       SchemaField field = searcher.getSchema().getFieldOrNull(command.getKey());
-      String groupValue = searchGroup.groupValue != null ? field.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString() : null;
+      String groupValue = null;
+      if (searchGroup.groupValue instanceof BytesRef) {
+        groupValue = searchGroup.groupValue != null ? field.getType().indexedToReadable((BytesRef) searchGroup.groupValue, new CharsRefBuilder()).toString() : null;
+      }
+      else {
+        groupValue = searchGroup.groupValue.toString();
+      }
       result.add(groupValue, convertedSortValues);
     }
 
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
index 8d2b3dca0c..a41f018c25 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
@@ -191,7 +191,7 @@ public class TopGroupsResultTransformer implements ShardResultTransformer<List<C
 
     final IndexSchema schema = rb.req.getSearcher().getSchema();
     SchemaField uniqueField = schema.getUniqueKeyField();
-    for (GroupDocs<BytesRef> searchGroup : data.groups) {
+    for (GroupDocs searchGroup : data.groups) {
       NamedList<Object> groupResult = new NamedList<>();
       groupResult.add("totalHits", searchGroup.totalHits);
       if (!Float.isNaN(searchGroup.maxScore)) {
@@ -229,8 +229,14 @@ public class TopGroupsResultTransformer implements ShardResultTransformer<List<C
         document.add("sortValues", convertedSortValues);
       }
       groupResult.add("documents", documents);
-      String groupValue = searchGroup.groupValue != null ?
-          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;
+      String groupValue = null;
+      if (searchGroup.groupValue instanceof BytesRef) {
+        groupValue = searchGroup.groupValue != null ?
+            groupField.getType().indexedToReadable((BytesRef) searchGroup.groupValue, new CharsRefBuilder()).toString() : null;
+      }
+      else {
+        groupValue = searchGroup.groupValue.toString();
+      }
       result.add(groupValue, groupResult);
     }
 
